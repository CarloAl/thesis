/*define Taxi{
	destination: '',
	time: '',
	radius: '',
    person: '',
    maxPrice: '',
    long: '',
    lat: '',
    username: '',
    userId: '',
    ws : '',
    phone: '',
    matched: false
}


define Passenger{
	destination: 'vub',
	time: '',
	radius: '',
    person: '',
    maxPrice: '',
    long: '',
    lat: '',
    username: '',
    userId: '',
    ws : '',
    phone: '',
    matched: false
}*/
/*
define Match{
	Passenger : '',
	Taxi : ''
}*/

//parser error test();

function deg2rad(deg) {
  return deg * (Math.PI/180);
}


function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {

  if(lat1===lat2 && lon1===lon2){
   return 0
  }else{
     var R = 6371; // Radius of the earth in km
     var dLat = deg2rad(lat2-lat1);  
     var dLon = deg2rad(lon2-lon1); 
     var a = 
       Math.sin(dLat/2) * Math.sin(dLat/2) +
       Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
       Math.sin(dLon/2) * Math.sin(dLon/2); 
     var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
     var d = R * c; // Distance in km
     return d;
  }
}



//when u write an if else u need always the {} or the parser gets an error

//if u don't want to get a error from the parse u have to declare the variable.


function checkDistance(lat1,lon1,lat2,lon2,radius1,radius2){

  //var radius = radius1<radius2?radius1:radius2;
  var radius = Math.min(radius2,radius1);
  if(getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) <= radius){
    return true
  }else{
  	return false;
  }
}


function sameDay(date1,date2){

	if(date1.getDay() == date2.getDay() && date1.getMonth() == date2.getMonth() && date1.getFullYear() == date2.getFullYear() )
		return true;
	return false;
}

function log(t,p,b){

	console.log(b);
	console.log(t);
	console.log(p);
	console.log(p.destination == t.destination );
	console.log( sameDay(p.time,t.time));
	debugger;
	if(b == "lower")
		console.log(p.person < t.person);
	else
		console.log(p.person == t.person);
	console.log(checkDistance(t.lat, t.long, p.lat,p.long,p.radius, t.radius));
	console.log(p.price <= t.price);
	return true;
}



/*
function test(e){
	console.log(e.destination);
	return true;
}

rule test {
	when{
		e : Element test(e);
	}then{
		console.log("teste");
	}
}*/


rule matchingEqualSeats{
	when{
		t : Taxi {destination: tDest, person: tPers, time: tTime, lat: tLat, long: tLong, radius: tRadius, price: tPrice};
		p : Passenger p.person <= tPers &&  p.destination == tDest && sameDay(p.time,tTime) 
		&& checkDistance(tLat, tLong, p.lat,p.long,p.radius, tRadius) && p.price <= tPrice;
	}then{
		//apparently it works even with 
		//assert(new Match({Passenger: p ,Taxi : t}));	   
        //matchFound(t,p);
        notify(t,p);
        notify(p,t);
        if( p.person > t.person ){
        	debugger;
        }

        if(t.person == p.person){
        	retract(t);
        	console.log("match equal!");
        }else{
        	console.log("match less!");
      		modify(t,function(){
  	            if(this.person <= 0 || p.person <= 0 )
  	            	debugger;
  	            this.person = this.person - p.person;
  	            if(this.person <= 0 || p.person <= 0 )
  	            	debugger;
      		});
        }
      	retract(p);
        //assert(Match(t,p));
	}
}

/*
rule matchingLowerSeats{
	when{
		t : Taxi ;
		p : Passenger p.person < t.person && p.destination == t.destination && sameDay(p.time,t.time) 
		&& checkDistance(t.lat, t.long, p.lat,p.long,p.radius, t.radius) && p.price <= t.price;// && log(t,p,"lower");
	}then{
		//assert(new Match({Passenger: p,Taxi : t));
		console.log("match less!");                
		if(p.person >= t.person)
			debugger;
		if(p.person <= 0 || t.person <= 0)
			debugger;
        modify(t,function(){
            if(this.person <= 0 || p.person <= 0 )
            	debugger;
            //t.person = t.person - p.person;
            this.person = this.person - p.person;
            if(this.person <= 0 || p.person <= 0 )
            	debugger;
        });
		
		
        notify(t,p);
        notify(p,t);
        //retract(t);
        retract(p);
	}
}*/
//u robably cannot factor our the commone behavior of the 2 then clauses because of scope (retract is called on...)?


//the retract of the passenger won't intefer with the modify (where we use p again), he does the same on the examples
		//and probably it is because the retract still remove the fact from the working memory, but I still have a referencence to it
		//from the lhs


//if I emit and event I cannot pass parameter (the taxi and the passenger), and the listener is on the js side
//remove retweet, no need
//throw jsonmongodb
//emit event for update seats
//compare ugly js and nools

/*

rule Rule2{
	when{
		e1 : Element e1.destination != null; //for further reuse but seems to work without it {destination : dest1 };
		e2 : Element e2.destination == e1.destination && e2 != e1;
	}then{
		modify(e1,function(){
			console.log(e1.destination);

			e1.destination = null;
			console.log("\n dest:" + e1.destination);
		});
	}
}*/
